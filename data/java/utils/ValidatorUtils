package com.qnvip.referral.common.util;

import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import java.util.regex.Pattern;

import org.apache.commons.lang3.StringUtils;

/**
 * 通用校验工具类 支持中国身份证号码验证和手机号验证
 * 
 * @author 黄子豪
 * @Email huangzihao@qnvip.com
 * @Date 2025/6/26 16:44
 */
public class ValidatorUtil {

    // 身份证号码长度常量
    private static final int ID_CARD_LENGTH_15 = 15;
    private static final int ID_CARD_LENGTH_18 = 18;

    // 18位身份证校验码权重
    private static final int[] WEIGHT_FACTORS = {7, 9, 10, 5, 8, 4, 2, 1, 6, 3, 7, 9, 10, 5, 8, 4, 2};

    // 18位身份证校验码对应表
    private static final char[] CHECK_CODES = {'1', '0', 'X', '9', '8', '7', '6', '5', '4', '3', '2'};

    // 省份代码映射表
    private static final Map<String, String> PROVINCE_CODES = new HashMap<>();

    // 中国大陆手机号正则表达式
    private static final Pattern MOBILE_PATTERN = Pattern.compile("^1[3-9]\\d{9}$");

    // 中国大陆手机号运营商号段
    private static final String[] MOBILE_OPERATORS = {
        // 中国移动
        "134", "135", "136", "137", "138", "139", "147", "148", "150", "151", "152", "157", "158", "159", "172", "178",
        "182", "183", "184", "187", "188", "195", "198",
        // 中国联通
        "130", "131", "132", "145", "146", "155", "156", "166", "167", "171", "175", "176", "185", "186",
        // 中国电信
        "133", "149", "153", "173", "174", "177", "180", "181", "189", "191", "193", "199",
        // 虚拟运营商
        "170", "171", "172", "173", "174", "175", "176", "177", "178", "179"};

    static {
        // 初始化省份代码
        PROVINCE_CODES.put("11", "北京");
        PROVINCE_CODES.put("12", "天津");
        PROVINCE_CODES.put("13", "河北");
        PROVINCE_CODES.put("14", "山西");
        PROVINCE_CODES.put("15", "内蒙古");
        PROVINCE_CODES.put("21", "辽宁");
        PROVINCE_CODES.put("22", "吉林");
        PROVINCE_CODES.put("23", "黑龙江");
        PROVINCE_CODES.put("31", "上海");
        PROVINCE_CODES.put("32", "江苏");
        PROVINCE_CODES.put("33", "浙江");
        PROVINCE_CODES.put("34", "安徽");
        PROVINCE_CODES.put("35", "福建");
        PROVINCE_CODES.put("36", "江西");
        PROVINCE_CODES.put("37", "山东");
        PROVINCE_CODES.put("41", "河南");
        PROVINCE_CODES.put("42", "湖北");
        PROVINCE_CODES.put("43", "湖南");
        PROVINCE_CODES.put("44", "广东");
        PROVINCE_CODES.put("45", "广西");
        PROVINCE_CODES.put("46", "海南");
        PROVINCE_CODES.put("50", "重庆");
        PROVINCE_CODES.put("51", "四川");
        PROVINCE_CODES.put("52", "贵州");
        PROVINCE_CODES.put("53", "云南");
        PROVINCE_CODES.put("54", "西藏");
        PROVINCE_CODES.put("61", "陕西");
        PROVINCE_CODES.put("62", "甘肃");
        PROVINCE_CODES.put("63", "青海");
        PROVINCE_CODES.put("64", "宁夏");
        PROVINCE_CODES.put("65", "新疆");
        PROVINCE_CODES.put("71", "台湾");
        PROVINCE_CODES.put("81", "香港");
        PROVINCE_CODES.put("82", "澳门");
        PROVINCE_CODES.put("91", "国外");
    }

    /**
     * 检查所提供的身份编号是否有效。 支持15位和18位中国身份证号码验证
     *
     * @param identityNo 要验证的身份号码
     * @return 如果身份号码有效则为 true，否则为 false
     */
    public static boolean isValidIdCard(String identityNo) {
        if (StringUtils.isEmpty(identityNo)) {
            return false;
        }

        // 去除空格
        identityNo = identityNo.trim();

        // 检查长度
        int length = identityNo.length();
        if (length != ID_CARD_LENGTH_15 && length != ID_CARD_LENGTH_18) {
            return false;
        }

        // 检查格式（只能包含数字和X）
        if (!identityNo.matches("^[0-9]{15}$|^[0-9]{17}[0-9Xx]$")) {
            return false;
        }

        // 检查省份代码
        String provinceCode = identityNo.substring(0, 2);
        if (!PROVINCE_CODES.containsKey(provinceCode)) {
            return false;
        }

        // 根据长度进行不同的验证
        if (length == ID_CARD_LENGTH_15) {
            return validate15DigitIdCard(identityNo);
        } else {
            return validate18DigitIdCard(identityNo);
        }
    }

    /**
     * 验证15位身份证号码
     *
     * @param identityNo 15位身份证号码
     * @return 是否有效
     */
    private static boolean validate15DigitIdCard(String identityNo) {
        // 15位身份证号码格式：省份(2位) + 地区(2位) + 年份(2位) + 月份(2位) + 日期(2位) + 顺序码(3位) + 性别(1位)

        // 检查出生日期
        String birthDate = "19" + identityNo.substring(6, 12); // 15位身份证年份只有2位，需要补全
        return isValidBirthDate(birthDate);
    }

    /**
     * 验证18位身份证号码
     *
     * @param identityNo 18位身份证号码
     * @return 是否有效
     */
    private static boolean validate18DigitIdCard(String identityNo) {
        // 18位身份证号码格式：省份(2位) + 地区(2位) + 年份(4位) + 月份(2位) + 日期(2位) + 顺序码(3位) + 性别(1位) + 校验码(1位)

        // 检查出生日期
        String birthDate = identityNo.substring(6, 14);
        if (!isValidBirthDate(birthDate)) {
            return false;
        }

        // 检查校验码
        return validateCheckCode(identityNo);
    }

    /**
     * 验证出生日期是否有效
     *
     * @param birthDate 出生日期字符串 (格式：yyyyMMdd)
     * @return 是否有效
     */
    private static boolean isValidBirthDate(String birthDate) {
        if (birthDate.length() != 8) {
            return false;
        }

        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
            sdf.setLenient(false); // 严格模式，不允许无效日期
            Date date = sdf.parse(birthDate);

            // 检查日期是否在合理范围内（1900年至今）
            Date minDate = sdf.parse("19000101");
            Date maxDate = new Date();

            return !date.before(minDate) && !date.after(maxDate);
        } catch (ParseException e) {
            return false;
        }
    }

    /**
     * 验证18位身份证的校验码
     *
     * @param identityNo 18位身份证号码
     * @return 校验码是否正确
     */
    private static boolean validateCheckCode(String identityNo) {
        // 获取前17位
        String first17 = identityNo.substring(0, 17);

        // 计算校验码
        int sum = 0;
        for (int i = 0; i < 17; i++) {
            sum += (first17.charAt(i) - '0') * WEIGHT_FACTORS[i];
        }

        // 计算校验码
        char expectedCheckCode = CHECK_CODES[sum % 11];

        // 获取实际校验码
        char actualCheckCode = Character.toUpperCase(identityNo.charAt(17));

        return expectedCheckCode == actualCheckCode;
    }

    /**
     * 将15位身份证号码转换为18位
     *
     * @param idCard15 15位身份证号码
     * @return 18位身份证号码，如果转换失败返回null
     */
    public static String convert15To18(String idCard15) {
        if (!isValidIdCard(idCard15) || idCard15.length() != ID_CARD_LENGTH_15) {
            return null;
        }

        // 15位转18位规则：
        // 1. 前6位保持不变
        // 2. 年份前加19
        // 3. 后3位保持不变
        // 4. 最后加校验码

        StringBuilder idCard18 = new StringBuilder();
        idCard18.append(idCard15.substring(0, 6)); // 省份+地区
        idCard18.append("19"); // 年份前缀
        idCard18.append(idCard15.substring(6)); // 年份后2位+月日+顺序码+性别

        // 计算校验码
        String first17 = idCard18.toString();
        int sum = 0;
        for (int i = 0; i < 17; i++) {
            sum += (first17.charAt(i) - '0') * WEIGHT_FACTORS[i];
        }

        char checkCode = CHECK_CODES[sum % 11];
        idCard18.append(checkCode);

        return idCard18.toString();
    }

    /**
     * 获取身份证号码中的出生日期
     *
     * @param identityNo 身份证号码
     * @return 出生日期字符串 (格式：yyyy-MM-dd)，如果解析失败返回null
     */
    public static String getIdCardBirthDate(String identityNo) {
        if (!isValidIdCard(identityNo)) {
            return null;
        }

        String birthDate;
        if (identityNo.length() == ID_CARD_LENGTH_15) {
            // 15位身份证：年份只有2位，需要补全
            birthDate = "19" + identityNo.substring(6, 12);
        } else {
            // 18位身份证：年份4位
            birthDate = identityNo.substring(6, 14);
        }

        try {
            SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");
            Date date = sdf.parse(birthDate);
            SimpleDateFormat outputSdf = new SimpleDateFormat("yyyy-MM-dd");
            return outputSdf.format(date);
        } catch (ParseException e) {
            return null;
        }
    }

    /**
     * 获取身份证号码中的性别
     *
     * @param identityNo 身份证号码
     * @return 性别字符串 ("男" 或 "女")，如果解析失败返回null
     */
    public static String getIdCardGender(String identityNo) {
        if (!isValidIdCard(identityNo)) {
            return null;
        }

        int genderDigit;
        if (identityNo.length() == ID_CARD_LENGTH_15) {
            // 15位身份证：最后一位是性别
            genderDigit = identityNo.charAt(14) - '0';
        } else {
            // 18位身份证：倒数第二位是性别
            genderDigit = identityNo.charAt(16) - '0';
        }

        return genderDigit % 2 == 1 ? "男" : "女";
    }

    /**
     * 获取身份证号码中的省份信息
     *
     * @param identityNo 身份证号码
     * @return 省份名称，如果解析失败返回null
     */
    public static String getIdCardProvince(String identityNo) {
        if (!isValidIdCard(identityNo)) {
            return null;
        }

        String provinceCode = identityNo.substring(0, 2);
        return PROVINCE_CODES.get(provinceCode);
    }

    /**
     * 验证中国大陆手机号是否有效
     * 
     * @param mobile 手机号
     * @return 如果手机号有效则为 true，否则为 false
     */
    public static boolean isValidMobile(String mobile) {
        if (StringUtils.isEmpty(mobile)) {
            return false;
        }

        // 去除空格
        mobile = mobile.trim();

        // 基本格式验证
        if (!MOBILE_PATTERN.matcher(mobile).matches()) {
            return false;
        }

        // 验证号段是否有效
        String prefix = mobile.substring(0, 3);
        for (String operator : MOBILE_OPERATORS) {
            if (operator.equals(prefix)) {
                return true;
            }
        }

        return false;
    }

    /**
     * 获取手机号运营商信息
     * 
     * @param mobile 手机号
     * @return 运营商名称，如果无法识别返回null
     */
    public static String getMobileOperator(String mobile) {
        if (!isValidMobile(mobile)) {
            return null;
        }

        String prefix = mobile.substring(0, 3);

        // 中国移动号段
        if (prefix
            .matches("134|135|136|137|138|139|147|148|150|151|152|157|158|159|172|178|182|183|184|187|188|195|198")) {
            return "中国移动";
        }

        // 中国联通号段
        if (prefix.matches("130|131|132|145|146|155|156|166|167|171|175|176|185|186")) {
            return "中国联通";
        }

        // 中国电信号段
        if (prefix.matches("133|149|153|173|174|177|180|181|189|191|193|199")) {
            return "中国电信";
        }

        // 虚拟运营商号段
        if (prefix.matches("170|171|172|173|174|175|176|177|178|179")) {
            return "虚拟运营商";
        }

        return null;
    }

    /**
     * 格式化手机号（添加空格分隔）
     * 
     * @param mobile 手机号
     * @return 格式化后的手机号，如果输入无效返回null
     */
    public static String formatMobile(String mobile) {
        if (!isValidMobile(mobile)) {
            return null;
        }

        // 格式化为：138 1234 5678
        return mobile.substring(0, 3) + " " + mobile.substring(3, 7) + " " + mobile.substring(7);
    }

    /**
     * 隐藏手机号中间4位数字
     * 
     * @param mobile 手机号
     * @return 隐藏后的手机号，如果输入无效返回null
     */
    public static String maskMobile(String mobile) {
        if (!isValidMobile(mobile)) {
            return null;
        }

        return mobile.substring(0, 3) + "****" + mobile.substring(7);
    }

    /**
     * 验证邮箱格式是否有效
     * 
     * @param email 邮箱地址
     * @return 如果邮箱格式有效则为 true，否则为 false
     */
    public static boolean isValidEmail(String email) {
        if (StringUtils.isEmpty(email)) {
            return false;
        }

        // 邮箱正则表达式
        String emailPattern = "^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$";
        return Pattern.matches(emailPattern, email.trim());
    }

    /**
     * 验证密码强度 要求：至少8位，包含大小写字母、数字和特殊字符
     * 
     * @param password 密码
     * @return 如果密码强度符合要求则为 true，否则为 false
     */
    public static boolean isStrongPassword(String password) {
        if (StringUtils.isEmpty(password) || password.length() < 8) {
            return false;
        }

        // 检查是否包含大写字母
        boolean hasUpperCase = password.matches(".*[A-Z].*");
        // 检查是否包含小写字母
        boolean hasLowerCase = password.matches(".*[a-z].*");
        // 检查是否包含数字
        boolean hasDigit = password.matches(".*\\d.*");
        // 检查是否包含特殊字符
        boolean hasSpecialChar = password.matches(".*[!@#$%^&*()_+\\-=\\[\\]{};':\"\\\\|,.<>\\/?].*");

        return hasUpperCase && hasLowerCase && hasDigit && hasSpecialChar;
    }

    /**
     * 验证URL格式是否有效
     * 
     * @param url URL地址
     * @return 如果URL格式有效则为 true，否则为 false
     */
    public static boolean isValidUrl(String url) {
        if (StringUtils.isEmpty(url)) {
            return false;
        }

        try {
            new java.net.URL(url.trim());
            return true;
        } catch (Exception e) {
            return false;
        }
    }

    /**
     * 验证IP地址格式是否有效
     * 
     * @param ip IP地址
     * @return 如果IP地址格式有效则为 true，否则为 false
     */
    public static boolean isValidIpAddress(String ip) {
        if (StringUtils.isEmpty(ip)) {
            return false;
        }

        String ipPattern = "^((25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\\.){3}(25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$";
        return Pattern.matches(ipPattern, ip.trim());
    }

    /**
     * 验证是否为纯数字字符串
     * 
     * @param str 待验证的字符串
     * @return 如果为纯数字则为 true，否则为 false
     */
    public static boolean isNumeric(String str) {
        if (StringUtils.isEmpty(str)) {
            return false;
        }

        return str.trim().matches("^\\d+$");
    }

    /**
     * 验证是否为有效的中国邮政编码
     * 
     * @param postcode 邮政编码
     * @return 如果邮政编码有效则为 true，否则为 false
     */
    public static boolean isValidPostcode(String postcode) {
        if (StringUtils.isEmpty(postcode)) {
            return false;
        }

        return postcode.trim().matches("^[1-9]\\d{5}$");
    }

    /**
     * 验证是否为有效的中国车牌号
     * 
     * @param plateNumber 车牌号
     * @return 如果车牌号有效则为 true，否则为 false
     */
    public static boolean isValidPlateNumber(String plateNumber) {
        if (StringUtils.isEmpty(plateNumber)) {
            return false;
        }

        // 普通车牌号：省份简称 + 字母 + 5位字母数字组合
        String normalPattern = "^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-Z][A-Z0-9]{5}$";

        // 新能源车牌号：省份简称 + 字母 + 6位字母数字组合
        String newEnergyPattern = "^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领][A-Z][A-Z0-9]{6}$";

        return plateNumber.trim().matches(normalPattern) || plateNumber.trim().matches(newEnergyPattern);
    }

    // 银行卡相关常量
    private static final Pattern BANK_CARD_PATTERN = Pattern.compile("^[0-9]{13,19}$");

    // 银行卡类型前缀映射
    private static final Map<String, String> BANK_CARD_PREFIXES = new HashMap<>();

    static {
        // 初始化银行卡类型前缀
        // 借记卡
        BANK_CARD_PREFIXES.put("62", "银联借记卡");
        BANK_CARD_PREFIXES.put("60", "银联借记卡");

        // 信用卡
        BANK_CARD_PREFIXES.put("4", "Visa信用卡");
        BANK_CARD_PREFIXES.put("5", "MasterCard信用卡");
        BANK_CARD_PREFIXES.put("34", "American Express信用卡");
        BANK_CARD_PREFIXES.put("37", "American Express信用卡");
        BANK_CARD_PREFIXES.put("6", "Discover信用卡");

        // 中国主要银行借记卡前缀
        BANK_CARD_PREFIXES.put("621700", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("622280", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("622700", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("622966", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("622988", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621661", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621663", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621667", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621668", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621669", "建设银行借记卡");

        BANK_CARD_PREFIXES.put("622202", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622203", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622208", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622210", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622215", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622220", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622225", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622230", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622235", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622240", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622245", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622250", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622255", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622260", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622265", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622270", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622275", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622280", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622285", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622290", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622295", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622300", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622305", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622310", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622315", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622320", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622325", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622330", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622335", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622340", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622345", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622350", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622355", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622360", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622365", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622370", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622375", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622380", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622385", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622390", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622395", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622400", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622405", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622410", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622415", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622420", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622425", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622430", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622435", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622440", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622445", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622450", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622455", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622460", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622465", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622470", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622475", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622480", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622485", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622490", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622495", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622500", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622505", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622510", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622515", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622520", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622525", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622530", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622535", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622540", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622545", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622550", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622555", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622560", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622565", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622570", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622575", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622580", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622585", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622590", "工商银行借记卡");
        BANK_CARD_PREFIXES.put("622595", "工商银行借记卡");

        BANK_CARD_PREFIXES.put("621660", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621661", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621662", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621663", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621664", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621665", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621666", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621667", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621668", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621669", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621670", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621671", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621672", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621673", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621674", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621675", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621676", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621677", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621678", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621679", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621680", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621681", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621682", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621683", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621684", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621685", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621686", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621687", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621688", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621689", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621690", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621691", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621692", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621693", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621694", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621695", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621696", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621697", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621698", "农业银行借记卡");
        BANK_CARD_PREFIXES.put("621699", "农业银行借记卡");

        BANK_CARD_PREFIXES.put("621785", "中国银行借记卡");
        BANK_CARD_PREFIXES.put("621786", "中国银行借记卡");
        BANK_CARD_PREFIXES.put("621787", "中国银行借记卡");
        BANK_CARD_PREFIXES.put("621788", "中国银行借记卡");
        BANK_CARD_PREFIXES.put("621789", "中国银行借记卡");
        BANK_CARD_PREFIXES.put("621790", "中国银行借记卡");
        BANK_CARD_PREFIXES.put("621791", "中国银行借记卡");
        BANK_CARD_PREFIXES.put("621792", "中国银行借记卡");
        BANK_CARD_PREFIXES.put("621793", "中国银行借记卡");
        BANK_CARD_PREFIXES.put("621794", "中国银行借记卡");
        BANK_CARD_PREFIXES.put("621795", "中国银行借记卡");
        BANK_CARD_PREFIXES.put("621796", "中国银行借记卡");
        BANK_CARD_PREFIXES.put("621797", "中国银行借记卡");
        BANK_CARD_PREFIXES.put("621798", "中国银行借记卡");
        BANK_CARD_PREFIXES.put("621799", "中国银行借记卡");

        BANK_CARD_PREFIXES.put("621559", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621560", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621561", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621562", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621563", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621564", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621565", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621566", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621567", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621568", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621569", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621570", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621571", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621572", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621573", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621574", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621575", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621576", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621577", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621578", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621579", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621580", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621581", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621582", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621583", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621584", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621585", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621586", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621587", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621588", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621589", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621590", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621591", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621592", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621593", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621594", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621595", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621596", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621597", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621598", "交通银行借记卡");
        BANK_CARD_PREFIXES.put("621599", "交通银行借记卡");

        BANK_CARD_PREFIXES.put("621700", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621701", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621702", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621703", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621704", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621705", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621706", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621707", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621708", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621709", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621710", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621711", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621712", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621713", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621714", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621715", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621716", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621717", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621718", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621719", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621720", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621721", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621722", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621723", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621724", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621725", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621726", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621727", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621728", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621729", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621730", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621731", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621732", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621733", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621734", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621735", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621736", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621737", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621738", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621739", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621740", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621741", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621742", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621743", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621744", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621745", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621746", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621747", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621748", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621749", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621750", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621751", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621752", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621753", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621754", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621755", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621756", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621757", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621758", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621759", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621760", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621761", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621762", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621763", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621764", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621765", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621766", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621767", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621768", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621769", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621770", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621771", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621772", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621773", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621774", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621775", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621776", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621777", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621778", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621779", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621780", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621781", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621782", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621783", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621784", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621785", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621786", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621787", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621788", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621789", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621790", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621791", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621792", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621793", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621794", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621795", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621796", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621797", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621798", "建设银行借记卡");
        BANK_CARD_PREFIXES.put("621799", "建设银行借记卡");
    }

    /**
     * 验证银行卡号是否有效 使用Luhn算法（模10算法）验证银行卡号
     * 
     * @param bankCardNo 银行卡号
     * @return 如果银行卡号有效则为 true，否则为 false
     */
    public static boolean isValidBankCard(String bankCardNo) {
        if (StringUtils.isEmpty(bankCardNo)) {
            return false;
        }

        // 去除空格和连字符
        bankCardNo = bankCardNo.replaceAll("[\\s-]", "");

        // 基本格式验证：13-19位数字
        if (!BANK_CARD_PATTERN.matcher(bankCardNo).matches()) {
            return false;
        }

        // 使用Luhn算法验证
        return validateLuhnAlgorithm(bankCardNo);
    }

    /**
     * 使用Luhn算法验证银行卡号
     * 
     * @param cardNumber 银行卡号
     * @return 如果通过Luhn算法验证则为 true，否则为 false
     */
    private static boolean validateLuhnAlgorithm(String cardNumber) {
        int sum = 0;
        boolean alternate = false;

        // 从右到左遍历
        for (int i = cardNumber.length() - 1; i >= 0; i--) {
            int n = Integer.parseInt(cardNumber.substring(i, i + 1));

            if (alternate) {
                n *= 2;
                if (n > 9) {
                    n = (n % 10) + 1;
                }
            }

            sum += n;
            alternate = !alternate;
        }

        return (sum % 10 == 0);
    }

    /**
     * 获取银行卡类型
     * 
     * @param bankCardNo 银行卡号
     * @return 银行卡类型，如果无法识别返回null
     */
    public static String getBankCardType(String bankCardNo) {
        if (!isValidBankCard(bankCardNo)) {
            return null;
        }

        // 去除空格和连字符
        bankCardNo = bankCardNo.replaceAll("[\\s-]", "");

        // 从最长前缀开始匹配
        for (int i = 6; i >= 1; i--) {
            if (bankCardNo.length() >= i) {
                String prefix = bankCardNo.substring(0, i);
                String cardType = BANK_CARD_PREFIXES.get(prefix);
                if (cardType != null) {
                    return cardType;
                }
            }
        }

        return null;
    }

    /**
     * 格式化银行卡号（添加空格分隔）
     * 
     * @param bankCardNo 银行卡号
     * @return 格式化后的银行卡号，如果输入无效返回null
     */
    public static String formatBankCard(String bankCardNo) {
        if (!isValidBankCard(bankCardNo)) {
            return null;
        }

        // 去除空格和连字符
        bankCardNo = bankCardNo.replaceAll("[\\s-]", "");

        // 根据卡号长度进行格式化
        int length = bankCardNo.length();
        if (length == 13) {
            // 13位卡号：xxxx xxxx xxxx x
            return bankCardNo.substring(0, 4) + " " + bankCardNo.substring(4, 8) + " " + bankCardNo.substring(8, 12)
                + " " + bankCardNo.substring(12);
        } else if (length == 14) {
            // 14位卡号：xxxx xxxx xxxx xx
            return bankCardNo.substring(0, 4) + " " + bankCardNo.substring(4, 8) + " " + bankCardNo.substring(8, 12)
                + " " + bankCardNo.substring(12);
        } else if (length == 15) {
            // 15位卡号：xxxx xxxx xxxx xxx
            return bankCardNo.substring(0, 4) + " " + bankCardNo.substring(4, 8) + " " + bankCardNo.substring(8, 12)
                + " " + bankCardNo.substring(12);
        } else if (length == 16) {
            // 16位卡号：xxxx xxxx xxxx xxxx
            return bankCardNo.substring(0, 4) + " " + bankCardNo.substring(4, 8) + " " + bankCardNo.substring(8, 12)
                + " " + bankCardNo.substring(12);
        } else if (length == 17) {
            // 17位卡号：xxxx xxxx xxxx xxxx x
            return bankCardNo.substring(0, 4) + " " + bankCardNo.substring(4, 8) + " " + bankCardNo.substring(8, 12)
                + " " + bankCardNo.substring(12, 16) + " " + bankCardNo.substring(16);
        } else if (length == 18) {
            // 18位卡号：xxxx xxxx xxxx xxxx xx
            return bankCardNo.substring(0, 4) + " " + bankCardNo.substring(4, 8) + " " + bankCardNo.substring(8, 12)
                + " " + bankCardNo.substring(12, 16) + " " + bankCardNo.substring(16);
        } else if (length == 19) {
            // 19位卡号：xxxx xxxx xxxx xxxx xxx
            return bankCardNo.substring(0, 4) + " " + bankCardNo.substring(4, 8) + " " + bankCardNo.substring(8, 12)
                + " " + bankCardNo.substring(12, 16) + " " + bankCardNo.substring(16);
        }

        return bankCardNo;
    }

    /**
     * 隐藏银行卡号中间部分数字
     * 
     * @param bankCardNo 银行卡号
     * @return 隐藏后的银行卡号，如果输入无效返回null
     */
    public static String maskBankCard(String bankCardNo) {
        if (!isValidBankCard(bankCardNo)) {
            return null;
        }

        // 去除空格和连字符
        bankCardNo = bankCardNo.replaceAll("[\\s-]", "");

        int length = bankCardNo.length();
        if (length <= 8) {
            // 如果卡号太短，只显示前2位和后2位
            return bankCardNo.substring(0, 2) + "****" + bankCardNo.substring(length - 2);
        } else {
            // 显示前4位和后4位，中间用*代替
            return bankCardNo.substring(0, 4) + " **** **** " + bankCardNo.substring(length - 4);
        }
    }

    /**
     * 获取银行卡号长度
     * 
     * @param bankCardNo 银行卡号
     * @return 银行卡号长度，如果输入无效返回-1
     */
    public static int getBankCardLength(String bankCardNo) {
        if (!isValidBankCard(bankCardNo)) {
            return -1;
        }

        return bankCardNo.replaceAll("[\\s-]", "").length();
    }

    /**
     * 验证是否为信用卡
     * 
     * @param bankCardNo 银行卡号
     * @return 如果是信用卡则为 true，否则为 false
     */
    public static boolean isCreditCard(String bankCardNo) {
        String cardType = getBankCardType(bankCardNo);
        if (cardType == null) {
            return false;
        }

        return cardType.contains("信用卡");
    }

    /**
     * 验证是否为借记卡
     * 
     * @param bankCardNo 银行卡号
     * @return 如果是借记卡则为 true，否则为 false
     */
    public static boolean isDebitCard(String bankCardNo) {
        String cardType = getBankCardType(bankCardNo);
        if (cardType == null) {
            return false;
        }

        return cardType.contains("借记卡");
    }
}
